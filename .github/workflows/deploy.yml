# .github/workflows/minimal-ci-cd.yml
name: minimal-ci-cd

on:
  push:
    branches: [ main, test ]

env:
  JAVA_VERSION: '21'
  TZ: 'Asia/Seoul'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Build jar (skip tests)
        run: ./gradlew clean bootJar -x test

      - name: Pick environment
        run: |
          BRANCH="${GITHUB_REF##*/}"
          if [ "$BRANCH" = "main" ]; then
            {
              echo "APP=ampm-backend-main"
              echo "PROFILE=main"
              echo "HOST=${{ secrets.MAIN_BACKEND_SSH_HOST }}"
              echo "SSH_PORT=${{ secrets.MAIN_BACKEND_SSH_PORT }}"
              echo "USER=${{ secrets.MAIN_BACKEND_SSH_USER }}"
              echo "PASSWORD=${{ secrets.MAIN_BACKEND_SSH_PASSWORD }}"
              echo "DIR=${{ secrets.MAIN_BACKEND_DIR }}"
              echo "PORT=${{ secrets.MAIN_BACKEND_API_PORT }}"
              echo "DB_USER=${{ secrets.MAIN_DB_USER }}"
              echo "DB_PASSWORD=${{ secrets.MAIN_DB_PASSWORD }}"
              echo "JWT_SECRET=${{ secrets.MAIN_JWT_SECRET }}"
              echo "JWT_ISSUER=${{ secrets.MAIN_JWT_ISSUER }}"
              echo "REDIS_PASSWORD=${{ secrets.MAIN_REDIS_PASSWORD }}"
              echo "STORAGE_BASE=${{ secrets.MAIN_STORAGE_BASE }}"
            } >> $GITHUB_ENV
          else
            {
              echo "APP=ampm-backend-test"
              echo "PROFILE=test"
              echo "HOST=${{ secrets.TEST_BACKEND_SSH_HOST }}"
              echo "SSH_PORT=${{ secrets.TEST_BACKEND_SSH_PORT }}"
              echo "USER=${{ secrets.TEST_BACKEND_SSH_USER }}"
              echo "PASSWORD=${{ secrets.TEST_BACKEND_SSH_PASSWORD }}"
              echo "DIR=${{ secrets.TEST_BACKEND_DIR }}"
              echo "PORT=${{ secrets.TEST_BACKEND_API_PORT }}"
              echo "DB_USER=${{ secrets.TEST_DB_USER }}"
              echo "DB_PASSWORD=${{ secrets.TEST_DB_PASSWORD }}"
              echo "JWT_SECRET=${{ secrets.TEST_JWT_SECRET }}"
              echo "JWT_ISSUER=${{ secrets.TEST_JWT_ISSUER }}"
              echo "REDIS_PASSWORD=${{ secrets.TEST_REDIS_PASSWORD }}"
              echo "STORAGE_BASE=${{ secrets.TEST_STORAGE_BASE }}"
            } >> $GITHUB_ENV
          fi
          {
            echo "ADMIN_NUMBER=${{ secrets.ADMIN_NUMBER }}"
            echo "ADMIN_NAME=${{ secrets.ADMIN_NAME }}"
            echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}"
          } >> $GITHUB_ENV
          # export jar to workspace root for scp
          JAR=$(find . -type f -path "*/build/libs/*.jar" | head -n 1)
          cp "$JAR" app.jar

      - name: Make remote dir
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USER }}
          password: ${{ env.PASSWORD }}
          port: ${{ env.SSH_PORT }}
          script: mkdir -p "${{ env.DIR }}"

      - name: Copy app.jar & Dockerfile
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USER }}
          password: ${{ env.PASSWORD }}
          port: ${{ env.SSH_PORT }}
          source: "app.jar,Dockerfile"
          target: "${{ env.DIR }}/"

      - name: Deploy (build & run)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USER }}
          password: ${{ env.PASSWORD }}
          port: ${{ env.SSH_PORT }}
          script: |
            set -e
            cd "${{ env.DIR }}"

            docker network inspect ampm-net >/dev/null 2>&1 || docker network create ampm-net

            if [ "${{ env.PROFILE }}" = "main" ]; then
              cat > .env <<'EOF'
            TZ=Asia/Seoul
            SPRING_PROFILES_ACTIVE=main

            ADMIN_NUMBER=${{ env.ADMIN_NUMBER }}
            ADMIN_NAME=${{ env.ADMIN_NAME }}
            ADMIN_PASSWORD=${{ env.ADMIN_PASSWORD }}

            MAIN_DB_URL=jdbc:postgresql://postgresql-main:5432/ampm_main?applicationName=ampm-backend-main&sslmode=disable
            MAIN_DB_USER=${{ env.DB_USER }}
            MAIN_DB_PASSWORD=${{ env.DB_PASSWORD }}

            MAIN_JWT_SECRET=${{ env.JWT_SECRET }}
            MAIN_JWT_ISSUER=${{ env.JWT_ISSUER }}

            MAIN_REDIS_HOST=redis-main
            MAIN_REDIS_PORT=6379
            MAIN_REDIS_PASSWORD=${{ env.REDIS_PASSWORD }}

            MAIN_STORAGE_BASE=${{ env.STORAGE_BASE }}
            EOF

              docker network connect ampm-net postgresql-main 2>/dev/null || true
              docker network connect ampm-net redis-main       2>/dev/null || true
            else
              cat > .env <<'EOF'
            TZ=Asia/Seoul
            SPRING_PROFILES_ACTIVE=test

            ADMIN_NUMBER=${{ env.ADMIN_NUMBER }}
            ADMIN_NAME=${{ env.ADMIN_NAME }}
            ADMIN_PASSWORD=${{ env.ADMIN_PASSWORD }}

            TEST_DB_URL=jdbc:postgresql://postgresql-test:5432/ampm_test?applicationName=ampm-backend-test&sslmode=disable
            TEST_DB_USER=${{ env.DB_USER }}
            TEST_DB_PASSWORD=${{ env.DB_PASSWORD }}

            TEST_JWT_SECRET=${{ env.JWT_SECRET }}
            TEST_JWT_ISSUER=${{ env.JWT_ISSUER }}

            TEST_REDIS_HOST=redis-test
            TEST_REDIS_PORT=6379
            TEST_REDIS_PASSWORD=${{ env.REDIS_PASSWORD }}

            TEST_STORAGE_BASE=${{ env.STORAGE_BASE }}
            EOF

              docker network connect ampm-net postgresql-test 2>/dev/null || true
              docker network connect ampm-net redis-test       2>/dev/null || true
            fi

            docker stop "${{ env.APP }}" 2>/dev/null || true
            docker rm   "${{ env.APP }}" 2>/dev/null || true

            docker build -t "${{ env.APP }}:latest" .
            docker run -d \
              --name "${{ env.APP }}" \
              --restart unless-stopped \
              --env-file .env \
              --network ampm-net \
              -p "${{ env.PORT }}:8080" \
              "${{ env.APP }}:latest"