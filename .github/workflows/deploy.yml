# .github/workflows/minimal-ci-cd.yml
name: minimal-ci-cd

on:
  push:
    branches: [ main, test ]

env:
  JAVA_VERSION: '21'
  TZ: 'Asia/Seoul'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Build jar (skip tests)
        run: ./gradlew clean bootJar -x test

      - name: Pick environment
        shell: bash
        run: |
          BRANCH="${GITHUB_REF##*/}"
          if [ "$BRANCH" = "main" ]; then
            {
              echo "APP=ampm-backend-main"
              echo "PROFILE=main"
              echo "NET=ampm"

              # DB URL을 시크릿에서 바로 사용
              echo "DB_URL=${{ secrets.MAIN_DB_URL }}"
              echo "DB_USER=${{ secrets.MAIN_DB_USER }}"
              echo "DB_PASSWORD=${{ secrets.MAIN_DB_PASSWORD }}"

              echo "HOST=${{ secrets.MAIN_BACKEND_SSH_HOST }}"
              echo "SSH_PORT=${{ secrets.MAIN_BACKEND_SSH_PORT }}"
              echo "USER=${{ secrets.MAIN_BACKEND_SSH_USER }}"
              echo "PASSWORD=${{ secrets.MAIN_BACKEND_SSH_PASSWORD }}"
              echo "DIR=${{ secrets.MAIN_BACKEND_DIR }}"
              echo "PORT=${{ secrets.MAIN_BACKEND_API_PORT }}"

              echo "JWT_SECRET=${{ secrets.MAIN_JWT_SECRET }}"
              echo "JWT_ISSUER=${{ secrets.MAIN_JWT_ISSUER }}"
              echo "STORAGE_BASE=${{ secrets.MAIN_STORAGE_BASE }}"

              # 관리자 계정(있다면 시크릿 추가 권장)
              echo "ADMIN_NUMBER=${{ secrets.MAIN_ADMIN_NUMBER }}"
              echo "ADMIN_NAME=${{ secrets.MAIN_ADMIN_NAME }}"
              echo "ADMIN_PASSWORD=${{ secrets.MAIN_ADMIN_PASSWORD }}"
            } >> $GITHUB_ENV
          else
            {
              echo "APP=ampm-backend-test"
              echo "PROFILE=test"
              echo "NET=ampm"

              echo "DB_URL=${{ secrets.TEST_DB_URL }}"
              echo "DB_USER=${{ secrets.TEST_DB_USER }}"
              echo "DB_PASSWORD=${{ secrets.TEST_DB_PASSWORD }}"

              echo "HOST=${{ secrets.TEST_BACKEND_SSH_HOST }}"
              echo "SSH_PORT=${{ secrets.TEST_BACKEND_SSH_PORT }}"
              echo "USER=${{ secrets.TEST_BACKEND_SSH_USER }}"
              echo "PASSWORD=${{ secrets.TEST_BACKEND_SSH_PASSWORD }}"
              echo "DIR=${{ secrets.TEST_BACKEND_DIR }}"
              echo "PORT=${{ secrets.TEST_BACKEND_API_PORT }}"

              echo "JWT_SECRET=${{ secrets.TEST_JWT_SECRET }}"
              echo "JWT_ISSUER=${{ secrets.TEST_JWT_ISSUER }}"
              echo "STORAGE_BASE=${{ secrets.TEST_STORAGE_BASE }}"

              echo "ADMIN_NUMBER=${{ secrets.TEST_ADMIN_NUMBER }}"
              echo "ADMIN_NAME=${{ secrets.TEST_ADMIN_NAME }}"
              echo "ADMIN_PASSWORD=${{ secrets.TEST_ADMIN_PASSWORD }}"
            } >> $GITHUB_ENV
          fi

          # export jar to workspace root for scp
          JAR=$(find . -type f -path "*/build/libs/*.jar" | head -n 1)
          cp "$JAR" app.jar

      - name: Make remote dir
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USER }}
          password: ${{ env.PASSWORD }}
          port: ${{ env.SSH_PORT }}
          script: |
            mkdir -p "${{ env.DIR }}"
            mkdir -p "${{ env.STORAGE_BASE }}"

      - name: Copy app.jar & Dockerfile
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USER }}
          password: ${{ env.PASSWORD }}
          port: ${{ env.SSH_PORT }}
          source: "app.jar,Dockerfile"
          target: "${{ env.DIR }}/"

      - name: Deploy (build & run)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USER }}
          password: ${{ env.PASSWORD }}
          port: ${{ env.SSH_PORT }}
          # 원격 서버에서 수행
          script: |
            set -euo pipefail
            cd "${{ env.DIR }}"

            # 네트워크 보장
            docker network inspect "${{ env.NET }}" >/dev/null 2>&1 || docker network create "${{ env.NET }}"

            # 브랜치별 .env 작성
            if [ "${{ env.PROFILE }}" = "main" ]; then
              cat > .env <<'EOF'
            TZ=Asia/Seoul
            SPRING_PROFILES_ACTIVE=main

            ADMIN_NUMBER=${{ env.ADMIN_NUMBER }}
            ADMIN_NAME=${{ env.ADMIN_NAME }}
            ADMIN_PASSWORD=${{ env.ADMIN_PASSWORD }}

            MAIN_DB_URL=${{ env.DB_URL }}
            MAIN_DB_USER=${{ env.DB_USER }}
            MAIN_DB_PASSWORD=${{ env.DB_PASSWORD }}

            MAIN_JWT_SECRET=${{ env.JWT_SECRET }}
            MAIN_JWT_ISSUER=${{ env.JWT_ISSUER }}

            MAIN_STORAGE_BASE=${{ env.STORAGE_BASE }}
            EOF
            else
              cat > .env <<'EOF'
            TZ=Asia/Seoul
            SPRING_PROFILES_ACTIVE=test

            ADMIN_NUMBER=${{ env.ADMIN_NUMBER }}
            ADMIN_NAME=${{ env.ADMIN_NAME }}
            ADMIN_PASSWORD=${{ env.ADMIN_PASSWORD }}

            TEST_DB_URL=${{ env.DB_URL }}
            TEST_DB_USER=${{ env.DB_USER }}
            TEST_DB_PASSWORD=${{ env.DB_PASSWORD }}

            TEST_JWT_SECRET=${{ env.JWT_SECRET }}
            TEST_JWT_ISSUER=${{ env.JWT_ISSUER }}

            TEST_STORAGE_BASE=${{ env.STORAGE_BASE }}
            EOF
            fi

            # 기존 컨테이너 중지/삭제 후 이미지 빌드
            docker rm -f "${{ env.APP }}" 2>/dev/null || true
            docker build -t "${{ env.APP }}:latest" .

            # 컨테이너 기동
            docker run -d \
              --name "${{ env.APP }}" \
              --restart unless-stopped \
              --env-file .env \
              --network "${{ env.NET }}" \
              -p "${{ env.PORT }}:8080" \
              -v "${{ env.STORAGE_BASE }}:${{ env.STORAGE_BASE }}" \
              "${{ env.APP }}:latest"
