name: CI & CD

on:
  push:
    branches: [main, test]

env:
  JAVA_VERSION: '21'
  TZ: 'Asia/Seoul'

concurrency:
  group: ampm-backend-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Gradle test (profile by branch)
        run: |
          BRANCH="${GITHUB_REF##*/}"
          if [[ "$BRANCH" == "main" ]]; then
            ./gradlew test -Dspring.profiles.active=main
          else
            ./gradlew test -Dspring.profiles.active=test
          fi

  deploy:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Build bootJar
        run: ./gradlew clean bootJar -x test

      - name: Prepare artifact
        run: |
          JAR=$(find . -type f -path "*/build/libs/*.jar" | head -n 1)
          [[ -z "$JAR" ]] && { echo "❌ bootJar not found"; exit 1; }
          cp "$JAR" app.jar
          ls -lh app.jar

      - name: Select environment (main/test) & export variables
        id: select-env
        shell: bash
        run: |
          BRANCH="${GITHUB_REF##*/}"
          echo "BRANCH=$BRANCH" >> $GITHUB_OUTPUT

          if [[ "$BRANCH" == "main" ]]; then
            echo "APP=ampm-backend-main"                >> $GITHUB_ENV
            echo "PROFILE=main"                          >> $GITHUB_ENV
            echo "HOST=${{ secrets.MAIN_BACKEND_HOST }}" >> $GITHUB_ENV
            echo "PORT=${{ secrets.MAIN_BACKEND_PORT }}" >> $GITHUB_ENV
            echo "USER=${{ secrets.MAIN_BACKEND_USER }}" >> $GITHUB_ENV
            echo "PASSWORD=${{ secrets.MAIN_BACKEND_PASSWORD }}" >> $GITHUB_ENV
            echo "DIR=${{ secrets.MAIN_BACKEND_DIR }}"   >> $GITHUB_ENV

            echo "MAIN_DB_URL=${{ secrets.MAIN_DB_URL }}" >> $GITHUB_ENV
            echo "MAIN_DB_USER=${{ secrets.MAIN_DB_USER }}" >> $GITHUB_ENV
            echo "MAIN_DB_PASSWORD=${{ secrets.MAIN_DB_PASSWORD }}" >> $GITHUB_ENV
            echo "MAIN_JWT_SECRET=${{ secrets.MAIN_JWT_SECRET }}" >> $GITHUB_ENV
            echo "MAIN_JWT_ISSUER=${{ secrets.MAIN_JWT_ISSUER }}" >> $GITHUB_ENV
            echo "MAIN_REDIS_HOST=${{ secrets.MAIN_REDIS_HOST }}" >> $GITHUB_ENV
            echo "MAIN_REDIS_PORT=${{ secrets.MAIN_REDIS_PORT }}" >> $GITHUB_ENV
            echo "MAIN_REDIS_PASSWORD=${{ secrets.MAIN_REDIS_PASSWORD }}" >> $GITHUB_ENV
            echo "MAIN_STORAGE_BASE=${{ secrets.MAIN_STORAGE_BASE }}" >> $GITHUB_ENV

            # Admin(운영에도 추가)
            echo "ADMIN_NUMBER=${{ secrets.ADMIN_NUMBER }}" >> $GITHUB_ENV
            echo "ADMIN_NAME=${{ secrets.ADMIN_NAME }}" >> $GITHUB_ENV
            echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> $GITHUB_ENV
          else
            echo "APP=ampm-backend-test"                 >> $GITHUB_ENV
            echo "PROFILE=test"                           >> $GITHUB_ENV
            echo "HOST=${{ secrets.TEST_BACKEND_HOST }}"  >> $GITHUB_ENV
            echo "PORT=${{ secrets.TEST_BACKEND_PORT }}"  >> $GITHUB_ENV
            echo "USER=${{ secrets.TEST_BACKEND_USER }}"  >> $GITHUB_ENV
            echo "PASSWORD=${{ secrets.TEST_BACKEND_PASSWORD }}" >> $GITHUB_ENV
            echo "DIR=${{ secrets.TEST_BACKEND_DIR }}"    >> $GITHUB_ENV

            echo "TEST_DB_URL=${{ secrets.TEST_DB_URL }}" >> $GITHUB_ENV
            echo "TEST_DB_USER=${{ secrets.TEST_DB_USER }}" >> $GITHUB_ENV
            echo "TEST_DB_PASSWORD=${{ secrets.TEST_DB_PASSWORD }}" >> $GITHUB_ENV
            echo "TEST_JWT_SECRET=${{ secrets.TEST_JWT_SECRET }}" >> $GITHUB_ENV
            echo "TEST_JWT_ISSUER=${{ secrets.TEST_JWT_ISSUER }}" >> $GITHUB_ENV
            echo "TEST_REDIS_HOST=${{ secrets.TEST_REDIS_HOST }}" >> $GITHUB_ENV
            echo "TEST_REDIS_PORT=${{ secrets.TEST_REDIS_PORT }}" >> $GITHUB_ENV
            echo "TEST_REDIS_PASSWORD=${{ secrets.TEST_REDIS_PASSWORD }}" >> $GITHUB_ENV
            echo "TEST_STORAGE_BASE=${{ secrets.TEST_STORAGE_BASE }}" >> $GITHUB_ENV

            echo "ADMIN_NUMBER=${{ secrets.ADMIN_NUMBER }}" >> $GITHUB_ENV
            echo "ADMIN_NAME=${{ secrets.ADMIN_NAME }}" >> $GITHUB_ENV
            echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> $GITHUB_ENV
          fi

      - name: Prepare remote directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USER }}
          password: ${{ env.PASSWORD }}
          script_stop: true
          envs: DIR
          script: |
            mkdir -p "${DIR}"

      - name: Copy artifacts to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USER }}
          password: ${{ env.PASSWORD }}
          source: "app.jar,Dockerfile"
          target: "${{ env.DIR }}/"

      - name: Deploy on server (Docker build & run)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USER }}
          password: ${{ env.PASSWORD }}
          script_stop: true
          envs: APP,PROFILE,PORT,DIR,MAIN_DB_URL,MAIN_DB_USER,MAIN_DB_PASSWORD,MAIN_JWT_SECRET,MAIN_JWT_ISSUER,MAIN_REDIS_HOST,MAIN_REDIS_PORT,MAIN_REDIS_PASSWORD,MAIN_STORAGE_BASE,TEST_DB_URL,TEST_DB_USER,TEST_DB_PASSWORD,TEST_JWT_SECRET,TEST_JWT_ISSUER,TEST_REDIS_HOST,TEST_REDIS_PORT,TEST_REDIS_PASSWORD,TEST_STORAGE_BASE,ADMIN_NUMBER,ADMIN_NAME,ADMIN_PASSWORD
          script: |
            set -euo pipefail

            cd "${DIR}"

            echo "▶ Create runtime .env for profile: ${PROFILE}"
            rm -f .env
            {
              echo "TZ=Asia/Seoul"
              echo "SPRING_PROFILES_ACTIVE=${PROFILE}"

              if [[ "${PROFILE}" == "main" ]]; then
                echo "MAIN_DB_URL=${MAIN_DB_URL}"
                echo "MAIN_DB_USER=${MAIN_DB_USER}"
                echo "MAIN_DB_PASSWORD=${MAIN_DB_PASSWORD}"
                echo "MAIN_JWT_SECRET=${MAIN_JWT_SECRET}"
                echo "MAIN_JWT_ISSUER=${MAIN_JWT_ISSUER}"
                echo "MAIN_REDIS_HOST=${MAIN_REDIS_HOST}"
                echo "MAIN_REDIS_PORT=${MAIN_REDIS_PORT}"
                echo "MAIN_REDIS_PASSWORD=${MAIN_REDIS_PASSWORD}"
                echo "MAIN_STORAGE_BASE=${MAIN_STORAGE_BASE}"
              else
                echo "TEST_DB_URL=${TEST_DB_URL}"
                echo "TEST_DB_USER=${TEST_DB_USER}"
                echo "TEST_DB_PASSWORD=${TEST_DB_PASSWORD}"
                echo "TEST_JWT_SECRET=${TEST_JWT_SECRET}"
                echo "TEST_JWT_ISSUER=${TEST_JWT_ISSUER}"
                echo "TEST_REDIS_HOST=${TEST_REDIS_HOST}"
                echo "TEST_REDIS_PORT=${TEST_REDIS_PORT}"
                echo "TEST_REDIS_PASSWORD=${TEST_REDIS_PASSWORD}"
                echo "TEST_STORAGE_BASE=${TEST_STORAGE_BASE}"
              fi

              # 운영/테스트 공통 Admin (요청대로 main에도 반영)
              echo "ADMIN_NUMBER=${ADMIN_NUMBER}"
              echo "ADMIN_NAME=${ADMIN_NAME}"
              echo "ADMIN_PASSWORD=${ADMIN_PASSWORD}"
            } > .env

            echo "▶ Stop & remove old container if exists"
            docker stop "${APP}" 2>/dev/null || true
            docker rm "${APP}" 2>/dev/null || true

            echo "▶ Build runtime image"
            docker build -t "${APP}:latest" .

            echo "▶ Run container on port ${PORT}"
            docker run -d \
              --name "${APP}" \
              --restart unless-stopped \
              --env-file .env \
              -p "${PORT}:8080" \
              "${APP}:latest"

            echo "▶ Health check"
            sleep 3
            (which curl >/dev/null 2>&1 && curl -fsS "http://127.0.0.1:${PORT}/actuator/health" && echo) || true
            docker logs --tail=80 "${APP}" || true
