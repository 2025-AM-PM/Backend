name: CI & CD

on:
  push:
    branches: [ main, test ]

env:
  JAVA_VERSION: '21'
  TZ: 'Asia/Seoul'

concurrency:
  group: ampm-backend-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Gradle test (profile by branch)
        shell: bash
        run: |
          BRANCH="${GITHUB_REF##*/}"
          if [[ "$BRANCH" == "main" ]]; then
            ./gradlew test -Dspring.profiles.active=main
          else
            ./gradlew test -Dspring.profiles.active=test
          fi

  deploy:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Build bootJar
        run: ./gradlew clean bootJar -x test

      - name: Prepare artifact
        run: |
          set -e
          JAR=$(find . -type f -path "*/build/libs/*.jar" | head -n 1)
          [[ -z "$JAR" ]] && { echo "❌ bootJar not found"; exit 1; }
          cp "$JAR" app.jar
          echo "== artifact =="
          ls -lh app.jar
          sha256sum app.jar || true

      - name: Select environment (main/test) & export variables
        shell: bash
        run: |
          set -e
          BRANCH="${GITHUB_REF##*/}"
          if [[ "$BRANCH" == "main" ]]; then
            echo "APP=ampm-backend-main"                                  >> $GITHUB_ENV
            echo "PROFILE=main"                                            >> $GITHUB_ENV
            echo "HOST=${{ secrets.MAIN_BACKEND_SSH_HOST }}"               >> $GITHUB_ENV
            echo "SSH_PORT=${{ secrets.MAIN_BACKEND_SSH_PORT }}"           >> $GITHUB_ENV
            echo "USER=${{ secrets.MAIN_BACKEND_SSH_USER }}"               >> $GITHUB_ENV
            echo "PASSWORD=${{ secrets.MAIN_BACKEND_SSH_PASSWORD }}"       >> $GITHUB_ENV
            echo "DIR=${{ secrets.MAIN_BACKEND_DIR }}"                     >> $GITHUB_ENV
            echo "PORT=${{ secrets.MAIN_BACKEND_API_PORT }}"               >> $GITHUB_ENV

            echo "MAIN_DB_URL=${{ secrets.MAIN_DB_URL }}"                  >> $GITHUB_ENV
            echo "MAIN_DB_USER=${{ secrets.MAIN_DB_USER }}"                >> $GITHUB_ENV
            echo "MAIN_DB_PASSWORD=${{ secrets.MAIN_DB_PASSWORD }}"        >> $GITHUB_ENV
            echo "MAIN_JWT_SECRET=${{ secrets.MAIN_JWT_SECRET }}"          >> $GITHUB_ENV
            echo "MAIN_JWT_ISSUER=${{ secrets.MAIN_JWT_ISSUER }}"          >> $GITHUB_ENV
            echo "MAIN_REDIS_HOST=${{ secrets.MAIN_REDIS_HOST }}"          >> $GITHUB_ENV
            echo "MAIN_REDIS_PORT=${{ secrets.MAIN_REDIS_PORT }}"          >> $GITHUB_ENV
            echo "MAIN_REDIS_PASSWORD=${{ secrets.MAIN_REDIS_PASSWORD }}"  >> $GITHUB_ENV
            echo "MAIN_STORAGE_BASE=${{ secrets.MAIN_STORAGE_BASE }}"      >> $GITHUB_ENV
          else
            echo "APP=ampm-backend-test"                                   >> $GITHUB_ENV
            echo "PROFILE=test"                                            >> $GITHUB_ENV
            echo "HOST=${{ secrets.TEST_BACKEND_SSH_HOST }}"               >> $GITHUB_ENV
            echo "SSH_PORT=${{ secrets.TEST_BACKEND_SSH_PORT }}"           >> $GITHUB_ENV
            echo "USER=${{ secrets.TEST_BACKEND_SSH_USER }}"               >> $GITHUB_ENV
            echo "PASSWORD=${{ secrets.TEST_BACKEND_SSH_PASSWORD }}"       >> $GITHUB_ENV
            echo "DIR=${{ secrets.TEST_BACKEND_DIR }}"                     >> $GITHUB_ENV
            echo "PORT=${{ secrets.TEST_BACKEND_API_PORT }}"               >> $GITHUB_ENV

            echo "TEST_DB_URL=${{ secrets.TEST_DB_URL }}"                  >> $GITHUB_ENV
            echo "TEST_DB_USER=${{ secrets.TEST_DB_USER }}"                >> $GITHUB_ENV
            echo "TEST_DB_PASSWORD=${{ secrets.TEST_DB_PASSWORD }}"        >> $GITHUB_ENV
            echo "TEST_JWT_SECRET=${{ secrets.TEST_JWT_SECRET }}"          >> $GITHUB_ENV
            echo "TEST_JWT_ISSUER=${{ secrets.TEST_JWT_ISSUER }}"          >> $GITHUB_ENV
            echo "TEST_REDIS_HOST=${{ secrets.TEST_REDIS_HOST }}"          >> $GITHUB_ENV
            echo "TEST_REDIS_PORT=${{ secrets.TEST_REDIS_PORT }}"          >> $GITHUB_ENV
            echo "TEST_REDIS_PASSWORD=${{ secrets.TEST_REDIS_PASSWORD }}"  >> $GITHUB_ENV
            echo "TEST_STORAGE_BASE=${{ secrets.TEST_STORAGE_BASE }}"      >> $GITHUB_ENV
          fi
          echo "ADMIN_NUMBER=${{ secrets.ADMIN_NUMBER }}"                  >> $GITHUB_ENV
          echo "ADMIN_NAME=${{ secrets.ADMIN_NAME }}"                      >> $GITHUB_ENV
          echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}"              >> $GITHUB_ENV

      - name: Sanitize HOST/DIR/PORT & print summary
        shell: bash
        run: |
          set -e
          echo "HOST=$(printf '%s' "${HOST}" | tr -d '\r' | xargs)"  >> $GITHUB_ENV
          echo "DIR=$(printf '%s' "${DIR}"  | tr -d '\r' | xargs)"   >> $GITHUB_ENV
          CLEAN_PORT="$(printf '%s' "${PORT}" | tr -d '\r' | xargs)"
          if ! [[ "${CLEAN_PORT}" =~ ^[0-9]{2,5}$ ]]; then
            echo "::error::Invalid PORT value: '${PORT}'"; exit 1;
          fi
          echo "PORT=${CLEAN_PORT}" >> $GITHUB_ENV
          echo "== env summary =="
          echo "APP=${APP}"
          echo "PROFILE=${PROFILE}"
          echo "HOST=${HOST}"
          echo "SSH_PORT=${SSH_PORT}"
          echo "USER=${USER}"
          echo "DIR=${DIR}"
          echo "PORT=${PORT}"

      - name: Prepare remote directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USER }}
          password: ${{ env.PASSWORD }}
          port: ${{ env.SSH_PORT }}
          script_stop: true
          envs: DIR
          debug: true
          script: |
            set -e
            echo "== remote mkdir -p ${DIR} =="
            mkdir -p "${DIR}"
            echo "== remote ls -la ${DIR} ==" && ls -la "${DIR}" || true

      - name: Copy artifacts to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USER }}
          password: ${{ env.PASSWORD }}
          port: ${{ env.SSH_PORT }}
          source: "app.jar,Dockerfile"
          target: "${{ env.DIR }}/"
          overwrite: true
          debug: true

      - name: Deploy on server (Docker build & run) - HARD DEBUG (POSIX sh)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USER }}
          password: ${{ env.PASSWORD }}
          port: ${{ env.SSH_PORT }}
          script_stop: true
          debug: true
          envs: APP,PROFILE,PORT,DIR,MAIN_DB_URL,MAIN_DB_USER,MAIN_DB_PASSWORD,MAIN_JWT_SECRET,MAIN_JWT_ISSUER,MAIN_REDIS_HOST,MAIN_REDIS_PORT,MAIN_REDIS_PASSWORD,MAIN_STORAGE_BASE,TEST_DB_URL,TEST_DB_USER,TEST_DB_PASSWORD,TEST_JWT_SECRET,TEST_JWT_ISSUER,TEST_REDIS_HOST,TEST_REDIS_PORT,TEST_REDIS_PASSWORD,TEST_STORAGE_BASE,ADMIN_NUMBER,ADMIN_NAME,ADMIN_PASSWORD
          script: |
            set +e

            echo "TRACE:0 uname"; uname -a || true
            echo "TRACE:1 os-release"; cat /etc/os-release || true
            echo "TRACE:2 docker version"; docker version || true
            echo "TRACE:2a shell info"; echo "SHELL=$(getent passwd $(id -un) 2>/dev/null | cut -d: -f7)"; ps -p $$ -o comm= || true

            echo "TRACE:3 check DIR [$DIR]"
            ls -la "$DIR" || true
            if [ ! -f "$DIR/Dockerfile" ]; then echo "::error::Dockerfile missing at $DIR/Dockerfile"; exit 1; fi
            if [ ! -f "$DIR/app.jar" ]; then echo "::error::app.jar missing at $DIR/app.jar"; exit 1; fi

            PROFILE="$(printf '%s' "$PROFILE" | tr -d '\r')"
            echo "TRACE:4 PROFILE=[$PROFILE]"

            echo "TRACE:4.1 select required list by case"
            case "$PROFILE" in
              main)
                required="MAIN_DB_URL MAIN_DB_USER MAIN_DB_PASSWORD MAIN_JWT_SECRET MAIN_JWT_ISSUER MAIN_REDIS_HOST MAIN_REDIS_PORT MAIN_REDIS_PASSWORD MAIN_STORAGE_BASE"
                ;;
              test)
                required="TEST_DB_URL TEST_DB_USER TEST_DB_PASSWORD TEST_JWT_SECRET TEST_JWT_ISSUER TEST_REDIS_HOST TEST_REDIS_PORT TEST_REDIS_PASSWORD TEST_STORAGE_BASE"
                ;;
              *)
                echo "::error::Unknown PROFILE: $PROFILE"; exit 1;;
            esac
            required_common="APP PROFILE PORT DIR ADMIN_NUMBER ADMIN_NAME ADMIN_PASSWORD"
            echo "TRACE:5 required list ready"

            missing=""
            echo "TRACE:6 check required_common"
            for v in $required_common; do
              eval "val=\${$v-}"
              if [ -z "${val+x}" ]; then
                echo "REQ:$v=<unset>"; missing="$missing $v"
              else
                l=$(printf '%s' "$val" | wc -c | tr -d ' ')
                echo "REQ:$v=len($l)"; [ -z "$val" ] && missing="$missing $v"
              fi
            done

            echo "TRACE:7 check profile-specific"
            for v in $required; do
              eval "val=\${$v-}"
              if [ -z "${val+x}" ]; then
                echo "REQ:$v=<unset>"; missing="$missing $v"
              else
                l=$(printf '%s' "$val" | wc -c | tr -d ' ')
                echo "REQ:$v=len($l)"; [ -z "$val" ] && missing="$missing $v"
              fi
            done

            if [ -n "$missing" ]; then
              echo "::error::Missing/empty env vars:$missing"
              exit 1
            fi
            echo "TRACE:8 env check passed"

            echo "TRACE:8.1 sanitize DIR/PORT"
            DIR="$(printf '%s' "$DIR" | tr -d '\r')"
            PORT="$(printf '%s' "$PORT" | tr -d '\r')"

            ENV_FILE="$DIR/.env"
            rm -f "$ENV_FILE"
            {
              echo "TZ=Asia/Seoul"
              echo "SPRING_PROFILES_ACTIVE=$PROFILE"
              case "$PROFILE" in
                main)
                  echo "MAIN_DB_URL=$MAIN_DB_URL"
                  echo "MAIN_DB_USER=$MAIN_DB_USER"
                  echo "MAIN_DB_PASSWORD=$MAIN_DB_PASSWORD"
                  echo "MAIN_JWT_SECRET=$MAIN_JWT_SECRET"
                  echo "MAIN_JWT_ISSUER=$MAIN_JWT_ISSUER"
                  echo "MAIN_REDIS_HOST=$MAIN_REDIS_HOST"
                  echo "MAIN_REDIS_PORT=$MAIN_REDIS_PORT"
                  echo "MAIN_REDIS_PASSWORD=$MAIN_REDIS_PASSWORD"
                  echo "MAIN_STORAGE_BASE=$MAIN_STORAGE_BASE"
                  ;;
                *)
                  echo "TEST_DB_URL=$TEST_DB_URL"
                  echo "TEST_DB_USER=$TEST_DB_USER"
                  echo "TEST_DB_PASSWORD=$TEST_DB_PASSWORD"
                  echo "TEST_JWT_SECRET=$TEST_JWT_SECRET"
                  echo "TEST_JWT_ISSUER=$TEST_JWT_ISSUER"
                  echo "TEST_REDIS_HOST=$TEST_REDIS_HOST"
                  echo "TEST_REDIS_PORT=$TEST_REDIS_PORT"
                  echo "TEST_REDIS_PASSWORD=$TEST_REDIS_PASSWORD"
                  echo "TEST_STORAGE_BASE=$TEST_STORAGE_BASE"
                  ;;
              esac
              echo "ADMIN_NUMBER=$ADMIN_NUMBER"
              echo "ADMIN_NAME=$ADMIN_NAME"
              echo "ADMIN_PASSWORD=$ADMIN_PASSWORD"
            } > "$ENV_FILE"
            tr -d '\r' < "$ENV_FILE" > "$ENV_FILE.tmp" && mv "$ENV_FILE.tmp" "$ENV_FILE"

            echo "TRACE:9 .env head (masked)"
            head -n 20 "$ENV_FILE" | sed 's/=.*/=<masked>/'

            echo "TRACE:10 validate env-file inside container"
            docker run --rm --env-file "$ENV_FILE" alpine:3 /bin/sh -c '[ -n "$SPRING_PROFILES_ACTIVE" ] && echo OK' || {
              echo "::error::env-file validation failed"; exit 1; }

            set -e
            set -x

            docker stop "$APP" 2>/dev/null || true
            docker rm   "$APP" 2>/dev/null || true

            ss -ltnp | grep -E ":$PORT " || true
            docker ps --format '{{.ID}} {{.Names}} {{.Ports}}' | sed -n '1,200p' || true
            docker ps --format '{{.ID}} {{.Names}} {{.Ports}}' \
              | awk -v p=":$PORT->" '$0 ~ p {print $1}' \
              | xargs -r docker stop || true

            DOCKER_BUILDKIT=1 docker build --progress=plain -t "$APP:latest" -f "$DIR/Dockerfile" "$DIR"

            if docker run --help 2>&1 | grep -q 'host-gateway'; then
              ADDHOST="--add-host=host.docker.internal:host-gateway"
            else
              GW_IP="$(ip route | awk '/default/ {print $3; exit}')"
              [ -n "$GW_IP" ] && ADDHOST="--add-host=host.docker.internal:$GW_IP" || ADDHOST=""
            fi
            echo "ADDHOST=$ADDHOST"

            docker run -d \
              --name "$APP" \
              --restart unless-stopped \
              --env-file "$ENV_FILE" \
              $ADDHOST \
              -p "$PORT:8080" \
              "$APP:latest"

            docker ps --filter "name=$APP"
            docker logs --tail=80 "$APP" || true
